---
bibliography:
- 'q4-report.bib'
---

------------------------------------------------------------------------

\

<span>0.4</span> ![image](arfc-logo){width="\textwidth"}

<span>0.6</span>

**Enabling Load Following Capability in the Transatomic Power MSR**

*Modeling-Enhanced Innovations Trailblazing Nuclear Energy
Reinvigoration (MEITNER) DE-FOA-0001798\
Task 2 Milestone Report*

------------------------------------------------------------------------

<span>0.4</span>

*Author*\
Andrei <span style="font-variant:small-caps;">Rykhlevskii</span>\

 

<span>0.4</span>

*Principal Investigator*\
Kathryn D. <span style="font-variant:small-caps;">Huff</span>

<span style="font-variant:small-caps;">**UIUC-ARFC-2019-012**</span>

<span style="font-variant:small-caps;">Advanced Reactors and Fuel
Cycles</span>\
<span style="font-variant:small-caps;">Dept. of Nuclear, Plasma, &
Radiological Engineering</span>\
<span style="font-variant:small-caps;">University of Illiois at
Urbana-Champaign</span>\

![image](arfc-smol) ![image](meitner.png) ![image](arpa-e.png)
![image](doe-logo.png)\
*The authors gratefully acknowledge the support of the MEITNER program,
sponsored by Advanced Research Projects Agency - Energy - U.S.
Department of Energy.*

Introduction
============

We initiated the Fuel Cycle Simulation task (Task 2) of the project in
August 2018 to more realistically model an online reprocessing system of
the . A Python toolkit, SaltProc v1
[@rykhlevskii_modeling_2019; @rykhlevskii_advanced_2018; @rykhlevskii_arfc/saltproc_2018],
was developed to represent simplified online fuel salt processing of .
More recently, advanced SaltProc version (SaltProc v2.0+) was developed
to simulate complex salt reprocessing system of the incorporating
user-parametrized components in the fuel salt processing design. This
report summarizes the progress we have made towards milestone **M2.1:
Demonstration SaltProc**, the challenges we currently face, and the
future plans towards ultimate Task 2 objectives.

Milestone objectives
====================

ARPA-E Award No. DE-AR0000983 with the Board of Trustees of the
University of Illinois Attachment 3 (Technical Milestones and
Deliverables) section D (Description of technical tasks, milestones, and
deliverables) formulated M2.1 goal as follows:\
“Initial demonstration of fuel cycle simulation package working together
with Monte Carlo to complete full core TAP reactor depletion
calculation. SaltProc will use separations efficiencies and dynamics
based on work in Task 1 and will be coupled with Serpent 2 where Monte
Carlo results will be done to &lt;10% relative error accuracy.”\
Herein we demonstrated following capabilities of SaltProc v2.0+:

1.  Read a user-defined Serpent 2 input template file with the model
    geometry, material composition, total heating power, and
    boundary conditions.

2.  Read a user-defined *.json* input file with parameters and structure
    of fuel salt reprocessing system.

3.  Run Serpent 2 in parallel mode to perform depletion calculation.

4.  Read Serpent 2 the depleted fuel composition file and store it in
    HDF5 database [@the_hdf_group_hierarchical_1997].

5.  Remove poisons from the fuel isotopic composition by passing
    information throughout user-parametrized components of the fuel salt
    processing system. For demonstration proposes, SaltProc v2.0+ used a
    user-defined constant separation efficiencies but can handle
    variable efficiencies based on work in Task 1.

6.  Make-up fuel salt mass loss in the primary loop due to poisons
    extraction by adding fresh salt with a user-defined isotopic
    composition (e.g., 5% and 19.79%, for this work).

7.  Store fuel salt composition after performing salt reprocessing,
    waste streams from each component of reprocessing system, and other
    major core parameters such as multiplication factor, burnup, total
    fissile mass, effective delayed neutron fraction, and
    breeding ratio.

The TRANSATOMIC POWER Molten Salt Reactor concept
=================================================

The concept is a 1250 MW$_{th}$ with a LiF-based uranium fuel salt
[@transatomic_power_corporation_technical_2016]. This concept uses
configurable zirconium hydride rods as the moderator while most designs
usually propose high-density reactor graphite. Zirconium hydride offers
a much higher neutron moderating density than graphite; much less
zirconium hydride volume is needed to achieve a thermal energy spectrum
similar to one obtained with graphite moderator. Moreover, zirconium
hydride has a much longer lifespan in extreme operational conditions
(high temperature, large neutron flux, chemically aggressive salt) than
reactor graphite. Finally, zirconium hydride is nonporous material and
holdup much less neutron poisons (e.g., xenon, krypton) comparing with
high-density reactor graphite
[@transatomic_power_corporation_technical_2016; @transatomic_power_corporation_neutronics_2016; @betzler_two-dimensional_2016].

TAP design description
----------------------

The design (figure \[fig:tap-main-view\]) is very similar to original
design developed by [@haubenreich_experience_1970] but has two major
innovations: the fuel salt composition and the moderator. The ’s
LiF-BeF$_2$-ZrF$_4$-UF$_4$ salt has been substituted with LiF-UF$_4$
salt which allows for an increase in the uranium concentration within
the fuel salt from 0.9 to 27.5% while maintaining a relatively low
melting point (490$^{\circ}$C compared with 434$^{\circ}$C for the
original ’s salt) [@betzler_two-dimensional_2016]. The graphite has a
very high thermal scattering cross section which makes it a perfect
moderator but has a few major drawbacks: (1) the low lethargy gain per
collision requires a large volume of moderator to be present to reach
criticality, which leads to a larger core and obstructs the core power
density; (2) even special reactor-grade graphite has relatively high
porosity, consequently, it holds gaseous (e.g., tritium, xenon) in
pores; (3) the reactor graphite lifespan in a commercial reactor is
about 10 years [@robertson_conceptual_1971]. To resolve these issues,
the concept uses another moderator, namely, zirconium hydride, allowing
for a more compact core and a significant increase in power density.
These two innovative design choices, together with a configurable
moderator (moderator-to-fuel ratio can be changed during regular
maintenance shutdown), facilitate the commercial deployment of this
conceptual design in the current commercially available 5% fuel cycle.

![The schematic view showing movable moderator rod bundles and shutdown
rod (figure reproduced from Transatomic Power White Paper
[@transatomic_power_corporation_technical_2016]).<span
data-label="fig:tap-main-view"></span>](tap_front_view.png){width="65.00000%"}

The primary loop contains the reactor core volume (including the
zirconium hydride moderator rods with silicone carbide cladding), pumps,
and primary heat exchanger. Pumps circulate the LiF-(Act)F$_4$ fuel salt
through the primary loop. The pumps, vessels, tanks, and piping are made
of a nickel-based alloy (similar to Hastelloy-N[^1]), which is highly
resistant to corrosion in various molten salt environments. Inside the
reactor vessel, in close proximity to the zirconium hydride moderator
rods, the fuel salt is in a critical configuration and generates heat.
Table \[tab:tap\_tab\] contains details of the system design which are
taken from technical white paper
[@transatomic_power_corporation_technical_2016] and a neutronics
overview [@transatomic_power_corporation_neutronics_2016] as well as
analysis of the design
[@betzler_two-dimensional_2016; @betzler_assessment_2017].

<span> s s</span> Thermal power & 1250 MW$_{th}  $\
Electric power & 520 MW$_e  $\
Gross thermal efficiency & 44%\
Outlet temperature & 620$^{\circ}$C\
Fuel salt components & LiF-UF$_4$\
Fuel salt composition & 72.5-27.5 mole%\
Uranium enrichment & 5% $^{235}$U\
Moderator & Zirconium Hydride (ZrH$_{1.66}$) rods (with silicon carbide
cladding)\
Neutron spectrum & thermal/epithermal\

\[tab:tap\_tab\]

TAP core design
---------------

In the core (figure \[fig:tap-core-view\]), fuel salt flows around
moderator assemblies consisting of lattices of zirconium hydride rods
clad in a corrosion-resistant silicone carbide
(figure \[fig:tap-main-view\]). The reactor pressure vessel is a
cylinder with inner radius 150 cm, height 350 cm and wall thickness 5 cm
made of a nickel-based alloy. The moderator-to-fuel ratio, or salt
volume fraction (SVF), in the core can be varied during operation to
shift the spectrum from intermediate to thermal energies (from to ,
respectively) to maximize fuel burnup. In practice, SVF can be varied by
inserting fixed-sized moderator rods via the bottom of the reactor
vessel (for safety considerations), similarly to moving the control rods
in a , as shown in Figure \[fig:tap-main-view\]. For the reactor, occurs
when the maximum number of moderator rods are inserted into the core and
further injection of fresh fuel salt does not change a criticality.
Unmoderated salt is flowing in the annulus between the core and the
vessel wall provides for a potential reduction in fast neutron flux at
the vessel structural material
[@transatomic_power_corporation_neutronics_2016].

![The schematic core view showing moderator rods (figure reproduced from
ORNL/TM-2017/475 [@betzler_assessment_2017]).<span
data-label="fig:tap-core-view"></span>](tap_core_ornl.png){width="\textwidth"}

TAP reprocessing system structure and simulation approach
---------------------------------------------------------

The nuclear island contains removal system. Gaseous are continuously
removed using an off-gas system while liquid and solid are extracted via
a chemical processing system. As these byproducts are gradually removed,
a small quantity of fresh fuel salt is regularly added to the primary
loop. This process conserves a constant fuel salt mass and keeps the
reactor critical. In contrast with the reprocessing system, the does not
need a protactinium separation and isolation system because it operates
in a uranium-based single-stage fuel cycle. The authors of the concept
suggested three distinct fission product removal methods
[@transatomic_power_corporation_neutronics_2016]:

#### Off-Gas System:

Removes gaseous fission products such as krypton and xenon, which are
then compressed and stored temporarily until they have decayed to the
background radiation level. Trace amounts of tritium are also removed
and bottled in a liquid form via the same process. In addition, the
off-gas system also directly removes a small fraction of the noble
metals.

#### Metal Plate-Out/Filtration:

Removes noble and semi-noble metal solid fission products as they plate
out onto a nickel mesh filter located in a side stream in the primary
loop.

#### Liquid Metal Extraction:

Lanthanides and other non-noble metals stay dissolved in the fuel salt.
They generally have a lower capture cross section and thus absorb fewer
neutrons than $^{135}$Xe but their extraction is essential to ensuring
normal operation. In the reactor, lanthanides removal is accomplished
via a liquid-metal/molten salt extraction process similar to that
developed for by [@robertson_conceptual_1971]. The process converts the
dissolved lanthanides into a well-understood oxide waste form, similar
to that of . This oxide waste comes out of the reprocessing plant in
ceramic granules and can be sintered into another convenient form for
storage.

Figure \[fig:tap-reproc\] shows a principal design of the primary loop
including an off-gas system, nickel mesh filter, and lanthanide chemical
extraction facility. Similarly to , an off-gas system is also based on
simple process of helium sparging through fuel salt with consequent gas
bubbles removed before returning the fuel salt back to the core.
Nevertheless, one important difference must be noted: the gas separation
system suggested helium injection and subsequent transport of the voids
throughout the primary loop including the core for at least 10 full
loops [@robertson_conceptual_1971]. It is significant concern to safe,
stable operation because the increase of void fraction in the fuel salt
when it enters back to the core would cause unpredictable reactivity
change. This drawback can be overcome by using an effective gas
separator for stripping helium/xenon bubbles before returning the salt
back to a primary loop (Figure \[fig:tap-reproc\], blue block).

![Simplified primary loop design including off-gas system (blue), nickel
filter (orange) and liquid metal extraction system (green) (reproduced
from [@transatomic_power_transatomic_2019]).<span
data-label="fig:tap-reproc"></span>](tap_primary_loop.png){width="\textwidth"}

Noble and semi-noble metal solid fission products are tends to plate out
onto metal surfaces including piping, heat exchanger tubes, reactor
vessel inner surface, etc. Previous research by
[@robertson_conceptual_1971] reported that about 50% of noble and
semi-noble metals would plate out inside systems without any special
treatment. To improve extraction efficiency of this fission products,
the concept suggested to employ a nickel mesh filter located in a bypass
stream in the primary loop (Figure \[fig:tap-reproc\], orange block).
The main idea of this filter is to create a maze with large metal
(nickel) surface area. The fuel salt flowing throughout the filter and
noble metals plate-out on the filter internal surface.

This Liquid Metal Extraction process for the concept has been adopted
from the . The demonstrated a liquid-liquid extraction process for
removing rare earths and lanthanides from fuel salt and estimated
efficiency of this process.

The project reported detailed list of elements for removal and removal
efficiencies (Table \[tab:reprocessing\_list\]). We used data from
neutronics whitepaper[@transatomic_power_corporation_neutronics_2016]
for SaltProc v2.0+ demonstration case without any modifications.

<span>p<span>0.2</span> p<span>0.42</span> p<span>0.12</span>
p<span>0.16</span></span> Processing group & Nuclides & Removal Rate
(s$^{-1}$) & Cycle time (at full power)\
\[5pt\]\
Volatile gases & Xe, Kr & 5.00E-2 & 20 sec\
\[5pt\] Noble metals & Se, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Sb, Te & 5.00E-2
& 20 sec\
\[5pt\] Seminoble metals & Zr, Cd, In, Sn & 5.79E-8 & 200 days\
\[5pt\] Volatile fluorides & Br, I & 1.93E-7 & 60 days\
\[5pt\] Rare earths & Y, La, Ce, Pr, Nd, Pm, Sm, Gd & 2.31E-7 & 50 days\
\[5pt\] & Eu & 2.32E-8 & 500 days\
\[5pt\] Discard & Rb, Sr, Cs, Ba & 3.37E-9 & 3435 days\
\[5pt\]

\
Volatile gases & H & 5.00E-2 & 20 sec\
\[5pt\] Noble metals & Ti, V, Cr, Cu & 3.37E-9 & 3435 days\
\[5pt\] Seminoble metals & Mn, Fe, Co, Ni, Zn, Ga, Ge, As & 3.37E-9 &
3435 days\
\[5pt\] Rare earths & Sc & 3.37E-9 & 3435 days\
\[5pt\] Discard & Ca & 3.37E-9 & 3435 days\
\[5pt\]

\[tab:reprocessing\_list\]

We simulated depletion in SaltProc v2.0+ using reprocessing cycle times
from this section (Table \[tab:reprocessing\_list\]), an online
reprocessing system design details, and full-core reactor Serpent model
(section \[sec:tap\_model\]) to capture the dynamics of fuel composition
evolution during reactor operation.

The SaltProc modeling and simulation code {#sec:tool}
=========================================

The first version of the SaltProc Python tool for calculating fuel
composition evolution taking into account an online reprocessing system
was developed in 2018 as a part of M.S. thesis
[@rykhlevskii_advanced_2018; @rykhlevskii_arfc/saltproc_2018]. The tool
was designed to expand Serpent 2 depletion capabilities for modeling
liquid-fueled with online fuel reprocessing system. SaltProc v1 uses
HDF5 [@the_hdf_group_hierarchical_1997] to store data and uses the PyNE
Nuclear Engineering Toolkit [@scopatz_pyne_2012] for Serpent 2 output
file parsing and nuclide naming. SaltProc v1 is an open-source Python
package that uses a batch-wise approach to simulate continuous feeds and
removals in .

SaltProc v1 only allows 100% separation efficiency for either specific
elements or groups of elements (e.g., Processing Groups as described in
Table \[tab:reprocessing\_list\]) at the end of the specific cycle time.
This simplification neglects the reality that the salt spends
appreciable time out of the core, in the primary loop pipes and the heat
exchanger. This approach works well for fast-removing elements (gases,
noble metals) which should be removed each depletion step.
Unfortunately, for the elements with longer cycle times (i.e. rare
earths should be removed every 50 days) this simplified approach leads
to oscillatory behavior of all major parameters
[@rykhlevskii_modeling_2019].

Capabilities of the developed tool, working with the Monte Carlo
software Serpent 2, were demonstrated using the full-core MSBR design
for a simplified case with ideal removal efficiency (100% of mass for
target elements removed) [@rykhlevskii_modeling_2019]. The preliminary
version of SaltProc architecture and principal structure was not
designed for flexible implementation of sophisticated online
reprocessing systems including realistic physics/chemistry-based
extraction efficiencies.

We completely re-factored SaltProc v1 using to create a comprehensive
generic tool to realistically model any reprocessing plant while taking
into account non-ideal or variable extraction efficiencies, and mass
balance between the core and processing plant.

SaltProc v2.0+ architecture
---------------------------

The SaltProc v2.0+ Python toolkit coupled directly with Serpent 2 input
and output files, to allow the reprocessing system couples to depletion
calculation. Existing PyNE interfaces are employed for Serpent output
parsing as well as newly developed interfaces for input and output
handling. Python 3 standard features is used to create a flexible,
user-friendly tool with great potential for further improvement and
collaboration. Figure \[fig:saltproc\_class\] shows the SaltProc v2.0+
class structure which includes 4 main classes:

![SaltProc v2.0+ python package class diagram in UML notation and
examples of object instances.<span
data-label="fig:saltproc_class"></span>](saltproc_class_diagram.png){width="107.00000%"}

#### Depcode.

Contains attributes and methods for reading the user’s input file for
the depletion software, initial material (e.g., fuel and/or fertile
salt) composition, principal parameters for burnup simulation (e.g.,
neutron population and number of cycles for Monte Carlo neutron
transport), and running the depletion code.

#### Simulation.

Runs Serpent depletion step, creates, and writes HDF5 database, tracks
time and converts isotopic composition vector nuclide names from Serpent
to human readable format.

#### MaterialFlow.

Each *MaterialFlow* object represents the material flowing between
*Process* objects. All instances of this class contains an isotopic
composition vector (PyNE Material object initialized from Serpent output
file **dep.m**), mass flow rate, temperature, density, volume, and void
fraction. Existing PyNE Material capabilities allows to easily convert
the units of isotopic composition vector (e.g., from atomic density
provided by Serpent to mass fraction or absolute mass in desired units),
decay material (i.e. model the protactinium decay tank), calculate decay
heat, activity and dose. The main idea of the *MaterialFlow* object is
to pass detailed information about the salt starting at the vessel
outlet throughout reprocessing components (*Processes*), which modify
the *MaterialFlow* object before depleting the material in the next
Serpent burnup step.

#### Process.

Each *Process* object represents a realistic fuel processing step
characterized by its throughput rate, volumetric capacity, extraction
efficiency for each target element (can be function of many parameters),
waste streams, and other parameters specific to the particular process.
Feed *Process* injects fresh fuel salt *MaterialFlow* directly into the
reactor core (e.g., adding fissile material with specific mass flow rate
to *MaterialFlow* after performing all removals).

The proposed class structure provides outstanding flexibility in
simulating various fuel processing system designs. A library of various
*MaterialFlow* (e.g., fuel salt flow, fertile salt flow, refueling salt
flow) and *Process* (e.g., helium sparging facility, gas separator,
lanthanide removal component) objects will be created to allow a user to
quickly create a model of a desired reprocessing scheme. At runtime, the
user will connect *Process* objects in series or parallel with
*MaterialFlow* objects to form a comprehensive reprocessing system. The
user will also be able to create custom objects with desired attributes
and methods, and contribute back to the code package using GitHub
(https://github.com/ arfc/saltproc).

SaltProc v2.0+ flowchart
------------------------

Figure \[fig:saltproc\_flow\] illustrates the online reprocessing
simulation algorithm coupling SaltProc v2.0+ and Serpent. To perform a
depletion step, SaltProc v2.0+ reads a user-defined Serpent template
file. This file contains input parameters such as geometry, material,
isotopic composition, neutron population, criticality cycles, total
heating power, and boundary conditions. SaltProc v2.0+ fills in the
template file and runs Serpent single-step depletion. After the
depletion calculation, SaltProc v2.0+ reads the depleted fuel
composition file into *MaterialFlow* object (*coreoutlet* in
figure \[fig:saltproc\_flow\]). This object contains an isotopic
composition vector, total volume of material, total mass, mass flow
rate, density, temperature, void fraction, etc. For the simplest
reprocessing case, when all fuel processing components are located
in-line (100% of total material flow goes through chain of separation
components), the *coreoutlet* object is flowing sequentially between
*Processes* and each *Process* is removing mass fraction of target
elements with specified extraction efficiency. Afterward, the removed
material mass will be compensated by fresh fuel salt to maintain the
salt inventory in a primary loop. Finally, resulting isotopic
composition after reprocessing is stored in HDF5 database and dumped in
a new composition file for the next Serpent depletion run. SaltProc
v2.0+ also stores in database isotopic composition before reprocessing
and waste stream from each fuel processing component.

![SaltProc v2.0+ python package flow chart.<span
data-label="fig:saltproc_flow"></span>](saltproc_flowchart.pdf){width="103.00000%"}

For a more general case with multiple concurrent extraction processes a
separate *MaterialFlow* object will be created for each branch with a
user-defined mass flow rate (e.g. 90% of total mass flow rate flows via
left branch and 10% through right branch). The total mass and isotopic
composition vector for each *MaterialFlow* object will be calculated as
a fraction of incoming *coreoutlet* flow. Then each *MaterialFlow*
object will be passed via a cascade of *Processes* to separate selected
chemical elements with specific efficiency. Finally, the left-hand-side
branch *MaterialFlow* object will be merged with the right-hand-side and
similarly to previous case, fresh fuel salt feed will compensate the
loss of mass in separation facilities and keep fuel salt mass in a
primary loop constant.

The class diagram (Figure \[fig:saltproc\_class\]) allows to model the
operation of a complex, multi-zone, multi-fluid and is sufficiently
general to represent myriad reactor systems. The refactored version of
SaltProc stores and edit the isotopic composition of the fuel stream,
which makes it a flexible tool to model any geometry: an infinite
medium, a unit cell, a multi-zone simplified assembly, or a full core.
This flexibiliity allows the user to perform simulations of varying
fidelity and computational intensity. SaltProc v2.0+ is an open-source
tool (but a user needs Serpent installed to use SaltProc v2.0+),
available on Github. It leverage unit and continuous tests crucial for
sustainable development [@krekel_pytest_2004]. It will also have
documentation generated through Sphinx, a documentation generator, for
ease of use [@brandl_sphinx_2009]. In summary, the development approach
of SaltProc v2.0+ is focused on producing a generic, flexible and
expandable tool to give the Serpent 2 Monte Carlo code the ability to
conduct advanced in-reactor fuel cycle analysis as well as simulate many
online refueling and fuel reprocessing systems.

SaltProc demonstration case
===========================

The SaltProc v2.0+ modeling and simulation tool is demonstrated for with
static core geometry, 5% startup composition
[@transatomic_power_corporation_neutronics_2016] and following fueling
scenarios: (1) no removal and feed (Serpent only); (2) a 5% online feed;
(3) a 19.79% online feed. The primary focus and the bulk of the analysis
herein has been on the last fueling scenario using 19.79% . All
calculations are run with Serpent version 2.1.31 and the JEFF-3.1.2
nuclear data library
[@leppanen_serpent_2013; @oecd/nea_data_bank_jeff-3.1.2_2014].

Serpent 2 full-core model {#sec:tap_model}
-------------------------

Advanced geometry surfaces and transformation capabilities of Serpent
[@leppanen_serpent_2013] are employed to represent core.
Figure \[fig:tap-serpent-plan\] shows the $XY$ section of whole-core
configuration at the expected reactor operational level when all control
rods are fully withdrawn. Figures \[fig:tap-serpent-elev\] and
 \[fig:tap-serpent-elev-zoom\] show a longitudinal section of the
reactor. This model contains the moderator rods with silicon carbide
cladding, pressure vessel, and inlet and outlet plena
(Table \[tab:tap\_model\_param\]). Fuel salt flows around rectangular
moderator assemblies consisting of lattices of small-diameter zirconium
hydride rods in a corrosion-resistant material. The in the core is
parameter similar to wide-used moderator-to-fuel ratio and can be
defined as: $$\begin{aligned}
SVF &= \frac{V_F}{V_F+V_M} = \frac{1}{1+V_M/V_F}
    \intertext{where}
    V_F &= \mbox{the fuel volume} \nonumber \\
    V_M &= \mbox{the moderator volume} \nonumber \\
    V_M/V_F &= \mbox{the moderator-to-fuel salt ratio} \nonumber\end{aligned}$$
The for model herein is 0.907268 which means the modeled core is
under-moderated and has intermediate spectrum.

![An $XY$ section of the model at horizontal midplane with fully
withdrawn control rods at ($=0.907268$). The violet color represents
zirconium hydride, and the yellow represents fuel salt. The blue color
shows Hastelloy-N, a material used for the vessel wall, and the white
color is the air.<span
data-label="fig:tap-serpent-plan"></span>](tap_plan_view.png){width="\textwidth"}

![An $XZ$ section of the model.<span
data-label="fig:tap-serpent-elev"></span>](tap_elev_view.png){width="\textwidth"}

![Zoomed $XZ$ section of the top of the moderator rods and guide tubes
for model. The orange color shows 70–30% Gd$_2$O$_3$–Al$_2$O$_3$ ceramic
absorbers used for control rods.<span
data-label="fig:tap-serpent-elev-zoom"></span>](tap_elev_view_zoomed.png){width="45.00000%"}

To represent reactivity control system the model has: (1) control rod
guide tubes made of nickel-based alloy; (2) control rods represented as
hollow 70-30% Gd$_2$O$_3$-Al$_2$O$_3$ cylinders with a thin Hastelloy-N
coating [@betzler_assessment_2017]; (3) air inside guide tubes and
control rods. Control rods design has yielded a cluster of 25 rods that
provide a total reactivity worth of 1121pcm[^2].

The control rod cluster is modeled using the **TRANS** Serpent 2 feature
which allows easily change the control rods position during simulation.
Herein we assumed that all control rods are fully withdrawn from the
core (figure \[fig:tap-serpent-elev-zoom\]) but for future investigation
control rods position may vary. In this report, all figures of the core
were generated using the built-in Serpent plotter.

<span>0.9</span><span>s s x p<span>0.15</span></span> **Component** &
**Parameter** & Value & Unit\
& Cladding thickness & 0.10 & cm\
& Radius & 1.15 & cm\
& Length & 3.0 & m\
& Pitch & 3.0 & cm\

& Array & 5 $\times$ 5 & rods$\times$rods\
& Pitch & 15.0 & cm\

& Assemblies & 268 & assemblies/core\
& Inner radius & 1.5 & m\
& Plenum height & 25.0 & cm\
& Vessel wall thickness & 5.0 & cm\

\[tab:tap\_model\_param\]

Simulated fuel reprocessing system
----------------------------------

We thoroughly analyzed the original reprocessing system design
(figure \[fig:tap-reproc\]) and neutron poisons removal rates
(table \[tab:reprocessing\_list\]) to determine suitable reprocessing
scheme for SaltProc v2.0+ demonstration
(figure \[fig:demo-repro-scheme\]).

![ reprocessing scheme flowchart used for SaltProc v2.0+ demonstration.
Arrows represent material flows; percents - fraction of total mass flow
rate; ellipses - fuel reprocessing system components; diamonds - waste
streams; box shows refuel material flow.<span
data-label="fig:demo-repro-scheme"></span>](demo_reprocessing_scheme.png){width="93.00000%"}

The gas removal components (the sparger and entrainment separator) are
located in-line because estimated full loop time for the fuel salt is
about 18 sec and approximately equal cycle time
(table \[tab:reprocessing\_list\]). To remove all volatile gases every
20 sec the fuel reprocessing system must operate with 100% of the core
throughout flow rate and exceptional efficiency. For the demonstration
case herein to achieve required cycle time we assumed xenon, krypton and
hydrogen extraction efficiencies for the sparger and entrainment
separator are equal 60% and 97%, respectively.

The nickel filter in the concept is designed to extract noble metals and
volatile fluorides. Similarly to volatile gases, noble metals must be
removed every 20 sec and, hence, the filter should also be able operate
in-line. The nickel filter removes wide range of elements with various
efficiencies. We calculated these efficiencies for SalProc v2.0+ input
from removal rates reported in table \[tab:reprocessing\_list\].

Lanthanides and other non-noble metals generally have a lower capture
cross-section and absorb fewer neutrons than gases and noble metals.
These elements can be removed via a liquid-metal/molten salt extraction
process with relatively low removal rates (cycle time &gt; 50 days).
This is accomplished using small fuel salt flow rate (10% of the core
throughout flow rate) via liquid-metal/molten salt component, where
lanthanides are removed with specific extraction efficiency to match
required cycle time (table \[tab:reprocessing\_list\]). The rest 90% of
the flow is directed from the nickel filter to heat exchanger without
performing any fuel salt treatment.

The removal rates vary among nuclides in this reactor concept which
dictate the necessary resolution of depletion calculations. If the
depletion time intervals are very short, an enormous number of depletion
steps are required to obtain the equilibrium composition. On the other
hand, if the depletion calculation time interval is too long, the impact
of short-lived fission products is not captured. To compromise, a 3-day
time was selected based on Betzler *et al.* timestep refinement study
[@betzler_assessment_2017]. For longer, lifetime-long depletion
simulations, 30-day timestep size will be applied.

Results
=======

The SaltProc v2.0+ online reprocessing simulation package is
demonstrated for analyzing neutronics and fuel cycle to find the
equilibrium core composition and core depletion. The neutron population
per cycle and the number of active/inactive cycles were chosen to obtain
balance between reasonable uncertainty for a transport problem (25 pcm
for effective multiplication factor) and computational time. We
accomplished it by setup neutron population 15’000, the number of active
cycle 400, and the number of inactive cycle 200. The depletion were
performed on 64 Blue Waters XE6 nodes (two AMD 6276 Interlagos CPU per
node, 16 floating-point Bulldozer core units per node or 32 “integer”
cores per node, nominal clock speed is 2.45 GHz). The total
computational time for calculating the equilibrium composition was
approximately 9000 node-hours ($\approx$16 core-years).

Effective multiplication factor
-------------------------------

Figures \[fig:keff\], \[fig:keff-zoomed\], \[fig:keff-zoomed-2\]
demonstrate the effective multiplication factors obtained using SaltProc
v2.0+ and Serpent. We obtained the effective multiplication factors
after removing fission products and adding feed material at the end of
each depletion step (3 days for this work). The $k_{eff}$ fluctuates
significantly as a result of the batch-wise nature of used online
reprocessing strategy.

![Effective multiplication factor dynamics for full-core model for
different fueling scenarios over a 13-year reactor operation. Confidence
interval $\pm\sigma=28pcm$ is shaded. Clearly, the reactor went
subcritical too fast and further investigation needed to overcome this
issue. Possible solutions are: (1) reduce neutron leakage from the core
by introducing thick graphite reflector and thermal insulation around
vessel to increase effective multiplication factor at the to 1.035; (2)
extract poisons with faster removal rate; (3) use another fissile
material for the feed (i.e., elements from spent fuel); (4) adjust
on-the-fly by moving moderator assemblies during operation
[@transatomic_power_corporation_technical_2016] or adding moderator rods
only at regular intervals during shutdown for reactor maintenance
[@betzler_fuel_2018].<span
data-label="fig:keff"></span>](keff_3.png){width="105.00000%"}

![Zoomed effective multiplication factor for the first 104 EFPD after
startup.<span
data-label="fig:keff-zoomed"></span>](keff_zoomed_1.png){width="85.00000%"}

![Zoomed effective multiplication factor for the time interval from 367
to 471 EFPD after startup.<span
data-label="fig:keff-zoomed-2"></span>](keff_zoomed_2.png){width="85.00000%"}

Loading initial fuel salt composition with 5% into the core leads to a
supercritical configuration with excess of reactivity about 1900pcm
(figure \[fig:keff\]). Without performing any fuel salt reprocessing the
core became subcritical after 30 days of operation
(figure \[fig:keff-zoomed\]). We obtained this result using naked
Serpent without introducing any extraction and refueling. For the
beginning of the lifetime uranium enrichment in the feed has minor
effect because tiny amount of poisons was produced (&lt;1kg/day) and,
hence, small mass of fresh salt was injected. Notably, the core went
subcritical after 42 days of operation either with 5% or 19.79% feed.

The core is never reached equilibrium fuel salt composition without
performing fuel salt reprocessing and refueling. For the fueling
scenarios with 5% and 19.79% feed the reactor achieved the equilibrium
state after 11 and 10 years of operation, respectively. Overall, the
effective multiplication factor gradually decrease from initial 1.018 to
0.88 for the 19.79% feed and to 0.86 for the 5% feed, which clearly
indicates problems with operating this nuclear reactor design. We will
try to overcome this issue by re-optimizing the core and design
parameters as well as adding new functionality to SaltProc v2.0+.

Acting as a compliment to Figure  \[fig:keff\], the
Figure \[fig:shannon\] shows Shannon entropy of a fission source as a
function of the number of inactive cycles and clearly indicates that the
Monte Carlo simulation convergences with number of inactive cycles
&gt;200 [@brown_k-effective_2011-1].

![Shannon entropy of a fission source for initial and equilibrium fuel
salt composition as a function of inactive cycles number for the full
core calculations with neutron population $M=15'000$.<span
data-label="fig:shannon"></span>](h_src.png){width="\textwidth"}

Neutron spectrum
----------------

Figure \[fig:spectrum\] shows the normalized neutron flux spectrum for
the full-core core model in the energy range from 10$^{-8}$ to 15 MeV.
The neutron energy spectrum at equilibrium is a little bit harder than
at startup due to plutonium and other strong absorbers accumulating in
the core during reactor operation. The spectrum is significantly harder
than in a typical , and is in a good agreement with report
[@betzler_assessment_2017].

![The neutron flux energy spectrum normalized by unit lethargy for
initial and equilibrium fuel salt composition for 5% and 19.79%
feed.<span
data-label="fig:spectrum"></span>](spectrum.png){width="\textwidth"}

Fuel salt composition
=====================

Figure \[fig:u-pu\] shows the absolute mass of major heavy isotopes
which have a strong influence on the reactor core physics. The mass of
$^{236}$U, $^{238}$U, $^{239}$Pu, $^{240}$Pu, and $^{241}$Pu in the fuel
salt changes insignificantly after approximately 10 years of operation,
which matches stabilization time for effective multiplication factor.
Hence, quisi-equilibrium state was reached after 10 years of reactor
operation. Moreover, the core bred approximately the same amount of
fissile $^{239}$Pu ($\approx2$t) as was initial fissile material
($^{235}$U) load. A significant amount of non-fissile plutonium builds
up during operation and accounts for 50% of the plutonium after 13 years
of operation. Overall, rate of breeding fissile $^{239}$Pu from
$^{238}$U even in relatively hard neutron spectrum is not large enough
to compensate negative effects of strong absorbers accumulation and keep
the reactor critical.

![Mass of major nuclides during 13 years of reactor operation with
19.79% feed.<span
data-label="fig:u-pu"></span>](u_pu_mass.png){width="103.00000%"}

We checked correctness of SaltProc v2.0+ by comparing mass of important
for load-following operation isotopes ($^{135}$Xe, $^{135}$I) to
expected mass after each depletion step (figure \[fig:xe-i\]). For
$^{135}$Xe expected mass was calculated as follows: $$\begin{aligned}
& m_{after\;reprocessing} = m_{before\;reprocessing} \times  \epsilon_{sparger} \times \epsilon_{separator}
    \intertext{where}
    m_{after} &= \mbox{the mass of the isotope after applying removals and feeds} \nonumber \\
    m_{before} &= \mbox{the mass of the isotope right before  reprocessing} \nonumber \\
    \epsilon_{sparger} &= \mbox{the sparger extraction efficiency} \nonumber \\
    \epsilon_{separator} &= \mbox{the entrainment separator extraction efficiency} \nonumber\end{aligned}$$

![Mass of major neutron poison, $^{135}$Xe, and its main precursor,
$^{135}$I, during 13 years of reactor operation before and after
reprocessing.<span
data-label="fig:xe-i"></span>](xe_i_mass.png){width="\textwidth"}

For the iodine approach is similar, but extraction efficiency of iodine
in the nickel filter is only 5%. Figure \[fig:xe-i\] shows that SaltProc
v2.0+ extraction module correctly removes target isotopes with specified
extraction efficiency: SaltProc and expected mass match. Overall, the
fuel reprocessing system simulated with SaltProc v2.0+ allows to keep
$^{135}$Xe inventory in the core during operation on 100% power as low
as 1g.

Future work
===========

The core should be able maintain critical state ($k_{eff}\geq 1.0$) for
at least 30 years operation lifetime. We will re-optimize and improve
the reactor model by performing next steps:

#### $k$ eigenvalue at :

The effective multiplication factor is too small at the . The most
recent paper [@betzler_fuel_2018] reported initial $k$ eigenvalue
calculated for about 1.035 which is much greater than our result
($1.01909\pm23pcm$). We will reduce fast neutron leakage by adding
appropriate reflector and thermal insulation around the vessel in order
to get larger excess of reactivity at the .

#### Dynamic moderator-to-volume fraction:

The major feature is the ability to adjust moderator-to-volume, or ,
ratio during lifetime by changing moderator rods configuration. Adding
more moderator in the core thermalizes neutron spectrum and
significantly extends the core lifetime. Unfortunately, the White papers
and technical reports lack details about how those configurations are
formed. We will create multiple geometries with various based on
assumption, that the plant personnel reconfiguring the moderator rods
only at regular intervals (i.e., 18 month) during shutdown for reactor
maintenance. That is, we assuming that the reactor maintaining the
long-term reactivity by periodically replacing stationary zirconium
hydride rod assemblies with those containing more rods (e.g.,
replacement of a four-rod assembly with a nine-rod assembly)
[@betzler_fuel_2018]. Additionally, we will add in SaltProc v2.0+
capability to switch from one geometry file to another with a
user-defined time interval.

#### Reprocessing scheme:

Extraction efficiencies and refueling strategy of the fuel reprocessing
and refueling plant will be revised to make sure that all possible
strong poisons are removed with appropriate rate.

[^1]: Hastelloy-N is very common in reactors now but have been studied
    and developed at in a program that started in 1950s.

[^2]: 1 pcm = 10$^{-5}\Delta k_{eff}/k_{eff}$.
